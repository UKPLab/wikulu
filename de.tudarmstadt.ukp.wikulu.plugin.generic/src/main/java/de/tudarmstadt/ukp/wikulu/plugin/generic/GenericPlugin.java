/*******************************************************************************
 * Copyright 2010-2016 Ubiquitous Knowledge Processing (UKP) Lab
 * Technische Universit√§t Darmstadt
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/.
 *******************************************************************************/
package de.tudarmstadt.ukp.wikulu.plugin.generic;

import java.io.IOException;
import java.util.Iterator;

import org.apache.uima.analysis_engine.AnalysisEngine;
import org.apache.uima.analysis_engine.AnalysisEngineProcessException;
import org.apache.uima.cas.CASException;
import org.apache.uima.cas.Type;
import org.apache.uima.jcas.JCas;
import org.apache.uima.jcas.tcas.Annotation;
import org.apache.uima.resource.ResourceConfigurationException;
import org.apache.uima.resource.ResourceInitializationException;
import org.codehaus.jettison.json.JSONArray;
import org.codehaus.jettison.json.JSONException;
import org.codehaus.jettison.json.JSONObject;
import org.jdom.JDOMException;
import org.uimafit.factory.AnalysisEngineFactory;

import de.tudarmstadt.ukp.dkpro.core.tokit.BreakIteratorSegmenter;
import de.tudarmstadt.ukp.dkpro.core.treetagger.TreeTaggerPosLemmaTT4J;
import de.tudarmstadt.ukp.dkpro.core.treetagger.TreeTaggerTT4JBase;
import de.tudarmstadt.ukp.wikulu.core.plugin.Plugin;

/**
 * A sample plugin for Wikulu. The plugin's JavaScript reads text from a Wiki article and
 * passes it on to Wikulu. Wikulu calls this classes' run method with the given text.
 * 
 * GenericPlugin uses annotation algorithms to process the text and returns the results
 * as a String. The results are passed on to the JavaScript, which will highlight the
 * found annotations.
 * 
 * @author C. Deeg
 */
public class GenericPlugin extends Plugin {
private AnalysisEngine highlighter;
	
	/** The prefix for the POS types which should be annotated **/
	private String typePrefix; 
	
	public GenericPlugin() {
		// Initialize superclass. This class later
		// uses a method from it.
		super();
	}

	@SuppressWarnings("unchecked")
	@Override
	public String run(String text) throws AnalysisEngineProcessException,
			ResourceInitializationException, JSONException,
			ResourceConfigurationException, IOException, CASException,
			JDOMException {
		
		/* The string passed on from Wikulu is a JSON string generated by the JavaScript script. */
		JSONObject json = new JSONObject(text);
		
		/* The results are also stored in a JSON object. */
		JSONObject results = new JSONObject();
		
		/* An array for the annotated words. */
		JSONArray annotations = new JSONArray();
		/* The found POS types. This will be used to create the menu later. */
		JSONObject types = new JSONObject();
		
		/* The text still contains HTML tags. The superclass has a method to remove them. */
		String unescapedText = super.unescapeString(json.getString("text"));
		
		/*
		 * Create two AnalysisEngines. The classes (BreakIteratorSegmenter and TreeTaggerPosLemmaTT4J)
		 * will tokenize and annotate the given text.
		 */
		AnalysisEngine textSegmenter = AnalysisEngineFactory.createPrimitive(BreakIteratorSegmenter.class);
		highlighter = AnalysisEngineFactory.createPrimitive(
				TreeTaggerPosLemmaTT4J.class,
				TreeTaggerTT4JBase.PARAM_LANGUAGE_CODE, "en");
		
		/*
		 * Create a JCas. A JCas contains the given text and information about it.
		 * Later the AnalysisEngines above will add their results to the JCas, too.
		 */
		JCas jcas = highlighter.newJCas();
		jcas.setDocumentText(unescapedText);
		jcas.setDocumentLanguage("en");
		
		/*
		 * Process the text. The first command runs the AnalysisEngine containing
		 * BreakIteratorSegmenter, which annotates sentences and tokens (single words).
		 * The second one uses the tokenized text to annotate the words with POS tags.
		 * The results are stored in the same JCas object the text is in.
		 */
		textSegmenter.process(jcas);
		highlighter.process(jcas);
		
		/* Get the prefix of the POS annotations from the configuration file. */
		typePrefix = getParameter("typePrefix");
		
		/* Iterate over the found annotations. */
		Iterator<Annotation> iterator = jcas.getAnnotationIndex().iterator();
		while(iterator.hasNext()) {
			// Get the Annotation object from the position the iterator points to.
			Annotation annotation = iterator.next();
			// Get the annotation's type
			Type type = annotation.getType();
			/* 
			 * The type name usually looks like de.tudarmstadt...NN,
			 * where de.tudarmstadt... is the prefix and NN is the short name
			 * of the annotation.
			 * 
			 */
			String[] typeNameParts = type.getName().split("\\.");
			String typeName = typeNameParts[typeNameParts.length - 1];
			// If the prefix equals the prefix defined in the configuration file,
			// store any relevant information about the annotation.
			if(type.getName().split(typeName)[0].startsWith(typePrefix)) {
				// If the current Annotation's type is found the first time,
				// store it.
				if(!types.has(typeName)) {
					JSONObject description = new JSONObject();
					description.put("name", typeName);
					// The color for highlighting all annotations from
					// this specific type is set in the configuration.
					description.put("color", getParameter(typeName));
					types.put(typeName, description);
				}
				
				/*
				 * Get and store information about the annotated word.
				 * Important for highlighting is the word itself, the type
				 * of the annotation and the color for highlighting.
				 */
				JSONObject currentAnnotation = new JSONObject();
				currentAnnotation.put("word", annotation.getCoveredText());
				currentAnnotation.put("typeName", typeName);
				currentAnnotation.put("color", getParameter(typeName));
				annotations.put(currentAnnotation);
			}
		}
		
		/*
		 * Move the found types to an array.
		 */
		JSONArray typeArray = new JSONArray();
		
		Iterator keyIterator = types.keys();
		while(keyIterator.hasNext()) {
			String key = (String) keyIterator.next();
			typeArray.put(types.getJSONObject(key));
		}

		// Add the array containing the POS types and the JSON object
		// containing the annotated words to the result JSON object.
		results.put("types", typeArray);
		results.put("annotations", annotations);
		// Return the JSON object as a String. The JavaScript will
		// create its own JSON object from this.
		return results.toString();
	}
}
